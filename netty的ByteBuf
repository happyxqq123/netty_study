  ByteBufAllocator.DEFAULT.directBuffer(10);
  直接内存创建和销毁代价昂贵，但读写性能高（少一次内存复制），适合配合池化功能一起使用
  直接内存堆GC压力小，因为这部分内存不受JVM垃圾回收器管理，但也要主要主动释放
池化VS非池化
   池化的意义在于可以重用ByteBuf，优点有
   没有池化，则每次都得创建新的ByteBuf实例，这个操作对直接内存代价昂贵，就算是堆内存，也会增加GC压力
   有了池化，则可以重用池中ByteBuf实列，并且采用了与jemalloc类似的内存分配算法提升分配效率
   高并发时，池化功能更节约内存，减少内存溢出
   -Dio.netty.allocator.type={unpooled|pooled}
    4.1以后，非Android平台默认启用了池化实现，Android平台启用非池化实现
    4.1之前，池化功能还不成熟，默认是非池化实现
 ByteBuf组成
    读写指针 和 容量 最大容量组成。
 扩容规则
     如果写入后数据大小未超过512，则选择下一个16的证书倍，列如写入后大小为12，则扩容后capacity是16
     如果写入后数据大小超过512，则选择下一个2^n,列如写入后大小为513，则扩容后capacity是2^10 = 1024(2^9=512已经不够了)
     扩容不能超过max capacity会报错
 retain&release
     UnpooledHeapByteBuf 使用JVM内存，只需GC回收内存即可
     UnpooledDirectByteBuf使用的直接内存，需要特殊方法来回收内存
     PooledByteBuf和它的子类使用池化机制，需要更复杂的规则来回收内存
  Netty采用了引用计数来控制回收内存，每个ByteBuf都实现了ReferenceCounted接口
     每个ByteBuf对象初始的计数为1
     调用release方法计数减1，如果计数为0 ，ByteBuf内存被回收
     调用retain方法计数加1，表示调用者没用完之前，其它handler即使调用release也不会造成回收
     当计数为0时，底层内存会被回收，这时即使ByteBuf对象还在，其各个方法均无法正常使用
     Pipeline中谁最后使用者，谁负责release详细分析如下
     1.起点，对于NIO实现来讲，在io.netty.channel.nio.AbstractNioByteChannel.NioByteUnsafe#read方法中首次创建ByteBuf放入pipeline
   slice
      零拷贝的体现之一，对原始ByteBuf进行切片成多个ByteBuf，切片后的ByteBuf并没有发生内存赋值，还是使用原始的ByteBuf的内存，切片后的ByteBuf维护独立的read,write指针
      
      
    
